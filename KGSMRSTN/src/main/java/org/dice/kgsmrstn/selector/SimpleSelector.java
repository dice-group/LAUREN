/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.dice.kgsmrstn.selector;

import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

import org.apache.jena.rdf.model.Statement;

/**
 *
 * @author Haseeb Javaid
 */
public class SimpleSelector extends AbstractSummarizationSelector {

	private Set<String> sourceClasses;
	private List<Statement> resources;
	private Random r = new Random(20);
	private int minSize = 1;
	private int maxSize = 5;
	private String clazz;
	private Integer topk;

	/**
	 * Constructor
	 * 
	 * @param sourceClasses
	 *            Classes for subjects
	 * @param targetClasses
	 *            Classes for objects
	 * @param endpoint
	 *            SPARQL endpoint
	 * @param graph
	 *            Graph to query (null if none)
	 * @param minSize
	 *            Minimal size of summary
	 * @param maxSize
	 *            Maximal size of summary
	 */
	public SimpleSelector(Set<String> sourceClasses, Set<String> targetClasses, String endpoint, String graph,
			int minSize, int maxSize, long seed, boolean useSymmetricCbd) {
		super(targetClasses, endpoint, graph, useSymmetricCbd);
		this.sourceClasses = sourceClasses;
		resources = null;
		this.minSize = minSize;
		if (maxSize < minSize) {
			maxSize = minSize + 1;
		}
		this.maxSize = maxSize;
		this.r = new Random(seed);

	}

	/**
	 * Constructor
	 * 
	 * @param sourceClasses
	 *            Classes for subjects
	 * @param targetClasses
	 *            Classes for objects
	 * @param endpoint
	 *            SPARQL endpoint
	 * @param graph
	 *            Graph to query (null if none)
	 */
	public SimpleSelector(Set<String> sourceClasses, Set<String> targetClasses, String endpoint, String graph,
			String clazz, int topk) {
		super(targetClasses, endpoint, graph);
		this.sourceClasses = sourceClasses;
		resources = null;
		this.clazz = clazz;
		this.topk = topk;
	}

	/**
	 * Returns the next set of statements generated by this selector
	 * 
	 * @return Set of statements
	 */
	public List<Statement> getNextStatements() {
		if (resources == null) {
			String Keyword = "";
			resources = getResources(sourceClasses, clazz, topk);
		}
		Set<Statement> result = new HashSet<>();
		// int size = minSize + r.nextInt(maxSize - minSize + 1);
		int counter = 0;
		// check for size, if size > statements simply take statements
		while (counter < resources.size()) {
			result.add(resources.get(counter));
			counter++;
		}
		// System.out.println(result);
		return sortStatements(result);
	}

}
